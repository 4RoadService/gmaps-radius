<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs 
        title="Radius"
        description="Displays a circle of a specified radius over a clicked point on the map."
        author="Oliver Beattie"
        author_email="oliver@obeattie.com"
        height="150">
        <Require feature="sharedmap"/>
    </ModulePrefs>
    
    <Content type="html"><![CDATA[
        <label for="radiusInput">Radius</label> <input type="text" value="5" id="radiusInput" onKeyUp="redraw()" /><br />
        <label for="units">Unit</label> <select id="unitSelector" onChange="redraw()">
            <option value="mi">Miles</option>
            <option value="km">Kilometers</option>
            <option value="ft">Feet</option>
            <option value="mt">Metres</option>
            <option value="in">Inches</option>
            <option value="yd">Yards</option>
            <option value="fa">Fathoms</option>
            <option value="na">Nautical miles</option>
            <option value="ch">Chains</option>
            <option value="rd">Rods</option>
            <option value="fr">Furlongs</option>
        </select>
        
        <script>
            var map = new GMap2();
            var overlay = null;
            var lastPoint = undefined;
            
            // Returns an array of GLatLng instances representing the desired points of the
            // radius circle
            var getPoints = function(lat, lng, radius, earth){
                var lat = (lat * Math.PI) / 180; //rad
                var lon = (lng * Math.PI) / 180; //rad
                var d = parseFloat(radius) / earth; // d = angular distance covered on earth's surface
                var points = [];
                for (x = 0; x <= 360; x++) 
                { 
                    brng = x * Math.PI / 180; //rad
                    var destLat = Math.asin(Math.sin(lat)*Math.cos(d) + Math.cos(lat)*Math.sin(d)*Math.cos(brng));
                    var destLng = ((lon + Math.atan2(Math.sin(brng)*Math.sin(d)*Math.cos(lat), Math.cos(d)-Math.sin(lat)*Math.sin(destLat))) * 180) / Math.PI;
                    destLat = (destLat * 180) / Math.PI;
                    points.push(new GLatLng(destLat, destLng));
                }
                return points;
            }
            
            // Returns the radius of the earth in the passed unit
            var getEarthRadius = function(key){
                return {
                    'mi': 3963.1676,
                    'km': 6378.1,
                    'ft': 20925524.9,
                    'mt': 6378100,
                    'in': 251106299,
                    'yd': 6975174.98,
                    'fa': 3487587.49,
                    'na': 3443.89849,
                    'ch': 317053.408,
                    'rd': 1268213.63,
                    'fr': 31705.3408
                }[key]
            }
            
            var redraw = function(){
                // If there's no point stored, we can't do anything
                if (!lastPoint) return;
                // If there's an existing overlay, destroy it
                if (overlay) {
                    map.removeOverlay(overlay);
                    overlay = null;
                }
                // Figure out the radius of the earth in the selected unit
                var select = document.getElementById('unitSelector');
                var unitKey = select.getElementsByTagName('option')[select.selectedIndex].value;
                var earth = getEarthRadius(unitKey);
                // And the radius in the entered units
                var radius = parseFloat(document.getElementById('radiusInput').value);
                if (!radius) return;
                // Draw the circle
                var points = getPoints(lastPoint.lat(), lastPoint.lng(), radius, earth);
                overlay = new GPolygon(points, '#004de8', 1, 0.62, '#004de8', 0.27);
                map.addOverlay(overlay);
            }
            
            GEvent.addListener(map, "click", function(meh, point) {
                if (point) {
                    lastPoint = point;
                    redraw();
                }
            });
        </script>
    ]]></Content>
</Module>
